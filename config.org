* Introduction
  This is work in progress, based on [[https://www.youtube.com/watch?v%3Dd6iY_1aMzeg&list%3DPLX2044Ew-UVVv31a0-Qn3dA6Sd_-NyA1n][Emacs Tutorial]] and [[https://github.com/daedreth/UncleDavesEmacs][UncleDaves' emacs config]].
  
* Emacs reset

  Get rid of the default decorations that I am not going to use and
  try to get the maximum space for working.
** Disable toolbar
  #+BEGIN_SRC emacs-lisp
    (tool-bar-mode -1)
  #+END_SRC

** Disable menubar
  #+BEGIN_SRC emacs-lisp
    (menu-bar-mode -1)
  #+END_SRC

** Disable scroll bar
  #+BEGIN_SRC emacs-lisp
   (when window-system
    (scroll-bar-mode -1))
  #+END_SRC

** Disable startup screen
  #+BEGIN_SRC emacs-lisp
    (setq inhibit-startup-message t)
  #+END_SRC

** Backups and autosaves

   Provided that important work is already under source control,
   I don't need Emacs to autosave or to create copies.
   #+BEGIN_SRC emacs-lisp
     (setq make-backup-files nil)
     (setq auto-save-default nil)
   #+END_SRC

** Prompt only y/n
   #+BEGIN_SRC emacs-lisp
     (defalias 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

** Match parens
   #+BEGIN_SRC emacs-lisp
     (show-paren-mode 1)
   #+END_SRC

** Encoding utf-8 by default
   #+BEGIN_SRC emacs-lisp
     (setq coding-system-for-read 'utf-8
           coding-system-for-write 'utf-8)
   #+END_SRC
** Replace buffer with ibuffer
  #+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-x C-b") 'ibuffer)
    (global-set-key (kbd "C-x b") 'ido-switch-buffer)
  #+END_SRC
   
* Introspection and discoverability
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init
    (which-key-mode))
#+END_SRC

* Terminal
** Setting default shell to bash
#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)

  (global-set-key (kbd "<s-return>") 'ansi-term)
#+END_SRC

* Visual enhancements

** Where I am on the file?
   
   In order to know where I am on a file when switching buffers,
   use beacon as a visual clue.

   #+BEGIN_SRC emacs-lisp
     (use-package beacon
       :ensure t
       :init
       (beacon-mode 1))
   #+END_SRC

** Scroll pages smothly
   #+BEGIN_SRC emacs-lisp
     (setq scroll-conservatively 100)
   #+END_SRC

** Get rid off the system bell
   #+BEGIN_SRC emacs-lisp
     (setq ring-bell-function 'ignore)
   #+END_SRC

** When on not in the terminal

*** Show current line
    #+BEGIN_SRC emacs-lisp
      (when window-system
        (global-hl-line-mode t))
    #+END_SRC

*** Pretty lambda
    Pretty lambda on demand via `C-c t s`.
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-c t s") 'prettify-symbols-mode)
    #+END_SRC

** Line numbers

    #+BEGIN_SRC emacs-lisp
      (which-key-add-key-based-replacements
        "C-c t" "toggle prefix")
      (define-key global-map (kbd "C-c t n") 'linum-mode)
    #+END_SRC

** Font size
   #+BEGIN_SRC emacs-lisp
     (define-key global-map (kbd "C-+") 'text-scale-increase)
     (define-key global-map (kbd "C--") 'text-scale-decrease)
   #+END_SRC

* Window manager
 #+BEGIN_SRC emacs-lisp
   (when window-system
   (use-package exwm
     :ensure t
     :config
     (require 'exwm-config)
     (exwm-config-default)))
 #+END_SRC

* Ido
 #+BEGIN_SRC emacs-lisp
   (setq ido-enable-flex-matching nil)
   (setq ido-create-new-buffer 'always)
   (setq ido-everywhere t)
   (ido-mode 1)
   (when window-system
     (exwm-config-ido))
 #+END_SRC

 #+BEGIN_SRC emacs-lisp
   (use-package ido-vertical-mode
     :ensure t
     :init
     (ido-vertical-mode 1))
   (setq ido-vertical-define-keys 'C-n-and-C-p-only)
 #+END_SRC

* Mode line

  Use the spacemacs modeline
  #+BEGIN_SRC emacs-lisp
    (use-package spaceline
      :ensure t
      :config
      (require 'spaceline-config)
        (setq spaceline-buffer-encoding-abbrev-p nil)
        (setq spaceline-line-column-p nil)
        (setq spaceline-line-p nil)
        (setq powerline-default-separator (quote arrow))
        (setq line-number-mode 1)
        (setq col-number-mode 1)
        (spaceline-spacemacs-theme)
        (setq display-time-24hr-format t)
        (setq display-time-format "%H:%M - %d-%m-%Y")
        (display-time-mode 1))
  #+END_SRC

* Config
  To reload the configuration
  #+BEGIN_SRC emacs-lisp
    (defun config-reload ()
      "Reloads ~/.emacs.d/config.org at runtime"
      (interactive)
      (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
    (global-set-key (kbd "C-c r") 'config-reload)
  #+END_SRC

* Ivy
  #+BEGIN_SRC emacs-lisp
    (use-package ivy
      :ensure t)
  #+END_SRC

* Searching
  #+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :bind ("C-s" . 'swiper))
  #+END_SRC

* Projects
  
  #+BEGIN_SRC emacs-lisp
    (use-package projectile
      :ensure t
      :bind-keymap ("C-c p" . projectile-command-map)
      :config
      (projectile-mode))
      
  #+END_SRC

  Add a tree for the projects
  #+BEGIN_SRC emacs-lisp
    (defun neotree-project-dir ()
        "Open NeoTree using the git root."
        (interactive)
        (let ((project-dir (projectile-project-root))
              (file-name (buffer-file-name)))
          (neotree-toggle)
          (if project-dir
              (if (neo-global--window-exists-p)
                  (progn
                    (neotree-dir project-dir)
                    (neotree-find file-name)))
            (message "Could not find git project root."))))

    (use-package neotree
      :ensure t
      :config
      (global-set-key (kbd "C-c t t") 'neotree-project-dir)
      (setq neo-smart-open t)
      (setq neo-vc-integration '(face))
      (setq neo-theme 'arrow)
      (add-hook 'neotree-mode-hook
                (lambda ()
                  (define-key evil-normal-state-local-map (kbd "TAB") 'neotree-enter)
                  (define-key evil-normal-state-local-map (kbd "SPC") 'neotree-quick-look)
                  (define-key evil-normal-state-local-map (kbd "q") 'neotree-hide)
                  (define-key evil-normal-state-local-map (kbd "RET") 'neotree-enter)
                  (define-key evil-normal-state-local-map (kbd "g") 'neotree-refresh)
                  (define-key evil-normal-state-local-map (kbd "n") 'neotree-next-line)
                  (define-key evil-normal-state-local-map (kbd "p") 'neotree-previous-line)
                  (define-key evil-normal-state-local-map (kbd "A") 'neotree-stretch-toggle)
                  (define-key evil-normal-state-local-map (kbd "H") 'neotree-hidden-file-toggle))))
  #+END_SRC

* Evil
  Set evil mode from start and unshadow `TAB` for cycling when in org mode.
  #+BEGIN_SRC emacs-lisp
    (use-package evil
      :ensure t
      :config
      (evil-mode 1)
      (evil-define-key 'normal org-mode-map
        (kbd "TAB") 'org-cycle))
  #+END_SRC

* Specific modes

** R

   #+BEGIN_SRC emacs-lisp
     (use-package ess
       :ensure t)
   #+END_SRC

** Haskell

   #+BEGIN_SRC emacs-lisp
     (use-package haskell-mode
       :ensure t)
   #+END_SRC

** F#

   #+BEGIN_SRC emacs-lisp
     (use-package fsharp-mode
       :ensure t
       :config
       (setq inferior-fsharp-program "/usr/bin/fsharpi")
       (setq fsharp-compiler "/usr/bin/fsharpc"))
   #+END_SRC

** Lisps

   #+BEGIN_SRC emacs-lisp
     (use-package paredit
       :ensure t
       :init
       (autoload 'enable-paredit-mode "paredit" "Turn on pseudo-structural editing of Lisp code." t)
       (add-hook 'emacs-lisp-mode-hook       #'enable-paredit-mode)
       (add-hook 'eval-expression-minibuffer-setup-hook #'enable-paredit-mode)
       (add-hook 'ielm-mode-hook             #'enable-paredit-mode)
       (add-hook 'lisp-mode-hook             #'enable-paredit-mode)
       (add-hook 'lisp-interaction-mode-hook #'enable-paredit-mode)
       (add-hook 'scheme-mode-hook           #'enable-paredit-mode))
   #+END_SRC

** Markdown

   #+BEGIN_SRC emacs-lisp
     (use-package markdown-mode
       :ensure t
       :commands (markdown-mode gfm-mode)
       :mode (("README\\.md\\'" . gfm-mode)
              ("\\.md\\'" . markdown-mode)
              ("\\.markdown\\'" . markdown-mode))
       :init (setq markdown-command "multimarkdown"))
   #+END_SRC

* Menu

  #+BEGIN_SRC emacs-lisp
     (use-package imenu-list
       :ensure t
       :bind (("C-c t m" . imenu-list-smart-toggle))
       :config
       (setq imenu-list-focus-after-activation t
             imenu-list-auto-resize nil)) 
  #+END_SRC

* Org

  Set default refile directory
  #+BEGIN_SRC emacs-lisp
    (use-package org
      :ensure t
      :config
      (setq org-default-notes-file (concat org-directory "/notes.org"))
      (global-set-key (kbd "C-c o c") 'org-capture))
  #+END_SRC
